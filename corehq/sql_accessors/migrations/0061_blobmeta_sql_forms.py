# -*- coding: utf-8 -*-
# Generated by Django 1.11.14 on 2018-08-30 14:42
from __future__ import absolute_import
from __future__ import unicode_literals

from django.db import migrations

from corehq.sql_db.operations import RawSQLMigration

migrator = RawSQLMigration(('corehq', 'sql_accessors', 'sql_templates'), {})


class Migration(migrations.Migration):

    dependencies = [
        ('sql_accessors', '0060_case_attachment_drops'),
    ]

    operations = [
        # NOTE these are technically blob db migrations, but they cannot
        # reside in the "blobs" app because they fail when run on the
        # main database when `USE_PARTITIONED_DATABASE == True`, as blob
        # db migrations must be because they affect to both partitioned
        # and unpartitioned models. This forces me into the awkward
        # situation of either splitting the blob db into two apps or
        # putting some of its code in other apps where it arguably does
        # not belong. I've opted for the latter in this case.
        migrator.get_migration('get_blobmetas.sql'),
        migrator.get_migration('setup_blobmeta_view.sql', 'drop_blobmeta_view.sql'),
        migrator.get_migration('restrict_legacy_attachment_metadata_insert.sql', testing_only=True)
    ]
